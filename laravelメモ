今回作成するTodoアプリのようなWEBアプリケーションは下記3つのサーバによって成り立つ。
WEBサーバー
アプリケーションサーバー
DBサーバー

画像参照
https://res.cloudinary.com/gizumo-inc/image/upload/v1712524431/curriculums/Laravel%20Lesson/App/laravel_lesson_server_architecture.png

※サーバーを複数に分ける理由は、後々サーバーの台数を増やしたいときに、
「WEBサーバーのみを増やしたい」、「アプリケーションサーバーのみ増やしたい」というように役割ごとにサーバーを増やせるようにするため

このうち、PHP・Laravelがインストールされているサーバはアプリケーションサーバになる。
このカリキュラムでは、アプリケーションサーバ内のLaravelにWEB・DBサーバとのやり取りを実装を行う。

アプリケーションの多くの機能はCRUD機能で成り立っている

CREATE データベースにデータを新規追加する
READ データベースからデータを取得・表示する
UPDATE データベースの既存データを更新する
DELETE データベースからデータを削除する

Laravelでは、MVCと呼ばれる開発効率を高めるために作られた構造 (アーキテクチャ) を採用している。

Model	DBとのやり取りを司る
View ユーザ (Client) に表示する画面の生成を司る
Controller ユーザからの入力 (送信データ) に基づき、 Model・Viewの制御を司る
Routing	ユーザからの依頼（リクエスト）に応じてどの処理を動かすかの判断を司る

画像参照
https://res.cloudinary.com/gizumo-inc/image/upload/v1712528154/curriculums/Laravel%20Lesson/App/laravel_lesson_mvc_arhitecture.png

MVC構成を採用することの2点のメリット

①再利用性：機能の修正が必要となった場合、1つのファイルに処理を集約した場合だと修正箇所全てを修正しなくてはいけなくなる。
一方、MVCを採用した場合、修正箇所は1箇所だけで済むようになる。
②可読性：変数名を扱う対象に合わせて変えられるため可読性が向上する。(例えば人物に関わるならperson、飲み物に関わるならdrinkなど)
③保守性：変数に代入した値を変える際、1箇所だけ変更すればいいだけなので間違いが少ない。


Laravelのインストールコマンド
docker-compose exec app composer create-project --prefer-dist laravel/laravel . "6.*"



