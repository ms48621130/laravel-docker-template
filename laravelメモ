今回作成するTodoアプリのようなWEBアプリケーションは下記3つのサーバによって成り立つ。
WEBサーバー
アプリケーションサーバー
DBサーバー

画像参照
https://res.cloudinary.com/gizumo-inc/image/upload/v1712524431/curriculums/Laravel%20Lesson/App/laravel_lesson_server_architecture.png

※サーバーを複数に分ける理由は、後々サーバーの台数を増やしたいときに、
「WEBサーバーのみを増やしたい」、「アプリケーションサーバーのみ増やしたい」というように役割ごとにサーバーを増やせるようにするため

このうち、PHP・Laravelがインストールされているサーバはアプリケーションサーバになる。
このカリキュラムでは、アプリケーションサーバ内のLaravelにWEB・DBサーバとのやり取りを実装を行う。

アプリケーションの多くの機能はCRUD機能で成り立っている

CREATE データベースにデータを新規追加する
READ データベースからデータを取得・表示する
UPDATE データベースの既存データを更新する
DELETE データベースからデータを削除する

Laravelでは、MVCと呼ばれる開発効率を高めるために作られた構造 (アーキテクチャ) を採用している。

Model	DBとのやり取りを司る
View ユーザ (Client) に表示する画面の生成を司る
Controller ユーザからの入力 (送信データ) に基づき、 Model・Viewの制御を司る
Routing	ユーザからの依頼（リクエスト）に応じてどの処理を動かすかの判断を司る

画像参照
https://res.cloudinary.com/gizumo-inc/image/upload/v1712528154/curriculums/Laravel%20Lesson/App/laravel_lesson_mvc_arhitecture.png

MVC構成を採用することの2点のメリット

①再利用性：機能の修正が必要となった場合、1つのファイルに処理を集約した場合だと修正箇所全てを修正しなくてはいけなくなる。
一方、MVCを採用した場合、修正箇所は1箇所だけで済むようになる。
②可読性：変数名を扱う対象に合わせて変えられるため可読性が向上する。(例えば人物に関わるならperson、飲み物に関わるならdrinkなど)
③保守性：変数に代入した値を変える際、1箇所だけ変更すればいいだけなので間違いが少ない。


Laravelのインストールコマンド
docker-compose exec app composer create-project --prefer-dist laravel/laravel . "6.*"


データベースにテーブルを用意する 〜Migration〜

DBにデータを保存するためのテーブルを作成する必要がある。
Laravelではテーブルの作成・レコードの作成を行うにあたって、MigrationとSeederと呼ばれる機能を提供している。

Migration (マイグレーション) : テーブルの作成を担うファイルのこと
①マイグレーションファイルの作成
Laravelでは、artisanコマンドを用いることでターミナルからファイル作成等を行うことができる。
# appコンテナ内で以下コマンド
php artisan make:migration create_todos_table

②マイグレーションファイルに作成したいテーブル情報を追記
upメソッドとは、データベースに新しいテーブルやカラムなどを生成するための処理。
デフォルトでidカラムとタイムスタンプの2つが既に記述されているため、その書き方にしたがって、追加したいカラムを記述する。
今回は、contentカラムを追加。

③マイグレーションファイルを実行してテーブルを作成
# appコンテナ内で以下コマンド
php artisan migrate
※もし表示されていない場合は、データベースの接続情報が間違っている可能性があるため、
.envの設定が正しいか確認

# dbコンテナ内で以下コマンド
mysql> use laravel_app;
mysql> DESC todos;
todosテーブルが作成されていることを確認
マイグレーションを用いることで直接SQLを記載することなくテーブルを作成することができる。

migrationを元に戻したい場合downメソッドを使用する。
downメソッドを実行するためには、rollbackコマンドを実行する
# appコンテナ内で以下コマンド
php artisan migrate:rollback
downメソッドは、upメソッドによって実行する操作と逆の操作を実装し、以前の状態へ戻す。


マイグレーションを使用する理由
①SQLを知らなくても、PHPコードでテーブル操作ができるため学習コストが不要
②マイグレーションファイルをGitで共有することで、開発者全員が同じ構成のテーブルを作成することができる。
③マイグレーションファイルをGitで共有することで、現在のデータベースの状態を共有することができる。


Seeder (シーダー) : レコード・テストデータの作成を担うファイルのこと、

①シーダーファイルの作成
マイグレーションファイル同様、artisanコマンドでシーダーファイルを作成することができる
# appコンテナ内で以下コマンド
php artisan make:seeder TodoSeeder

②シーダーファイルに作成したいテストデータ情報を記載
作成されたシーダーファイルはTodoSeederクラスとrun()メソッドで構成されている。
run()メソッドの中にテストデータを投入する実装処理を連想配列の形で行う。
DB::table('todos')はtableメソッドの引数のテーブルを操作するための準備。
insertメソッドで引数のデータをテーブルに投入するINSERT文を実行する。
truncateメソッドで該当のテーブルのレコードをすべて削除するTRUNCATE文を実行する。
シーダーの実行により、開発者間のテストデータに差異が生じないようにするため
元々テーブルに存在していたデータを削除後、テストデータを投入する必要がある。

③シーダークラスを登録
作成したシーダークラスはこのままでは実行できないため、
database/seeds/DatabaseSeeder.phpのcallメソッドに登録することで実行することができる。

④シーダーを実行
artisanコマンドを用いることでDatabaseSeeder.phpのcallメソッドを実行することができる。
# appコンテナ内で以下コマンド
php artisan db:seed
テストデータが作成されているかdbコンテナに入って確認
