## 代表的なHTTPステータスコード  
- 200 OK(リクエストが成功したことを示す)  
- 302 Found(リクエストされたURLが一時的に変更されたことを示しリダイレクトする際に用いられる)  
- 404 Not Found(リクエストされたページが存在しないことを示す)  
- 500 Internal Server Error(サーバ側で予期しないエラーが発生していることを示す)  

## 代表的なプロトコル一覧  
- IP(インターネット・プロトコル)特定の機器同士を接続するためのプロトコル  
- TCP(トランスミッション・コントロール・プロトコル)安全にデータを通信するためのプロトコル  
- SMTP(シンプル・メール・トランスファー・プロトコル)メール形式でデータをやりとりするためのプロトコル  
- HTTP(ハイパー・テキスト・トランスファー・プロトコル)Webサイトを表示するためのプロトコル  

## 代表的なサーバーの種類  
- Webサーバ インストールされているソフトウェアの機能によりクライアントからの要求内容に応じて対応するHTMLや画像などを送り返す  
- アプリケーションサーバ Webサーバから受け取った要求内容をもとにサーバサイド言語ファイルを実行し結果を送り返す  
- データベースサーバ MySQLやPostgreSQLなどのデータベースがインストールされておりアプリケーションから発行されたSQL文の実行結果を返す  
- メールサーバ メールの送受信機能をもつ  
※ 一つのサーバにWebサーバ・アプリケーションサーバ・データベースサーバそれぞれのソフトウェアをインストールしている場合もあれば、  
それぞれ別のサーバを立てて動かすこともある。どちらの構成にしろ、サーバの中では三層構成のように複数のソフトウェアが機能していることを覚えておく  

## Webサーバソフトソフトウェア(WebサーバにおいてHTTPのやりとりを実行してくれるソフト)  
- Apache アパッチ(負荷が低い・セットアップが他のソフトと比べ容易)  
- Nginx エンジンエックス(多数の同時アクセス時のパフォーマンスが高い)  

## 仮想環境が必要な理由  
ほとんどの方が開発用のPCにMacOSやWindowsOSを利用しているが、実際に本番環境で利用するのはLinuxOS  
MaxOSでは動いてもWindowsでは動かない、その逆、どちらでも動かない可能性がある  
開発環境の中に本番環境と同等の環境を用意することで、環境の違いによる不具合の発生を防ぐ目的がある  
また、開発者同士も同じ環境を用意するため、環境構築の手順を統一できるという利点もある  
もし開発者一人一人に物理サーバーを用意していたら、初期費用だけで数千万以上かかってしまう。


## 「ディレクトリ」とは簡単に言うと「フォルダ」のこと  
コンピュータ内のデータは「フォルダ」と「ファイル」で作られており、フォルダによる階層構造で構成されている  
プログラミングの文脈では「フォルダ」ではなく、「ディレクトリ」という言葉を使用する  

## lsというコマンドは、ディレクトリ内に存在するディレクトリやファイルを一覧表示するコマンド  
- -a 不可視ファイルも表示  
- -l タイプや権限、所有者や所有グループなどの詳細情報を表示  
※ オプションは -la といった形でまとめて指定することが可能  

## pwdというコマンドは、現在自分が位置しているディレクトリ = ワーキングディレクトリ がどこであるか出力するコマンド  

## cdは、ワーキングディレクトリを指定したディレクトリに変更するコマンド  
cdコマンドで記号を指定することで特定のディレクトリに移動することができる  
- ~ ホームディレクトリ(OSにログインした直後に表示されるディレクトリ)  
- / ルートディレクトリ(階層構造の一番上にあるディレクトリ)  
- - 移動前に位置していたディレクトリ  
- . ワーキングディレクトリ(現在作業しているディレクトリ)  
- .. ワーキングディレクトリの一階層上のディレクトリ  
- ../../ ワーキングディレクトリの二階層上のディレクトリ  

- 絶対パスとはサーバ内の最も上位の階層であるルートディレクトリから参照するパス    
- 相対パスとはワーキングディレクトリから参照するパス  
※ 絶対パスの表記では必ず最上位の階層であるルートを示す / から表記する  

## mkdirはディレクトリを作成するコマンド  
- -p を指定して実行することで途中に存在しないディレクトリを含めてディレクトリの作成を行う  

## touchはファイルを作成するコマンド  

## cpはファイルあるいはディレクトリのコピーを行うコマンド  
- -r オプションを指定することでディレクトリの複製が可能  

## mvはファイルやディレクトリの移動を行うコマンド  
移動と同時にファイル名の変更を行うこともできる  

## rmはファイルやディレクトリの削除を行うコマンド  
- -r オプションを指定することで、ディレクトリの削除が可能  
※ 以下のコマンドは絶対に実行しないこと！  
rm -rf /  -f というオプションは削除実行の際に警告メッセージを表示せずに削除してしまう  
そのため上記のコマンドを実行すると、最上位階層の / 配下が全て削除されてPCがただの板になってしまう  

## ワイルドカードとは * の部分が何であれ、* 以外の部分がマッチするファイルやディレクトリ全てを対象として操作できる機能  
## ? は*と同様に、? 以外の部分がマッチするファイルやディレクトリ全てを対象として操作できる  
*とは違い ? は指定した箇所の1文字のみの置き換えになる  
特定のファイルを複数一気に削除する際にワイルドカードは役に立つ  

## > は 左辺の実行結果の出力を右辺で指定したファイルに書き込む記号  
すでに存在するファイル名を指定した場合は中身を全て上書きしてしまうので注意  

## >> は 左辺の実行出力結果を右辺で指定したファイルの末尾に書き込む記号  
> >> どちらでもファイルが存在しなかった場合に新規で作成できるが、既にファイルが存在した場合の動作が異なる  

## cat は指定したファイルの内容をターミナル上に出力するコマンド  

## vi は、ターミナル上で即時起動できるエディタ  
$ vi ファイル名 と実行することでターミナル上でエディタを即時起動し、その場でファイルの編集・保存を行うことができる  
※ 普段使用しているエディタとの違いについて  
今は自身のPCにあるファイルを編集しているので問題ないが、場合によってはリモートのサーバにアクセスして  
そこでファイルを編集しないといけないというケースがある  
例えば現在Dockerで作ったLinuxの環境にログインしているが、ここで作ったファイルを  
VSCodeなどのPCにインストールしているテキストエディタで開くのは簡単ではない  
そんなとき、vi を使用すればそういった面倒な作業を必要とせず、その場で直接ファイルを編集して保存することができる  
実行するとターミナルの画面がエディタに切り替わる  
vi には2つの代表的なモードがある  

## ノーマルモード  
ノーマルモード時は編集を行うことはできない  
移動や保存、検索や削除などの操作をキーで行うことができる  

## インサートモード  
ファイル編集モードで、入力したキーがそのままファイルに反映される  

i インサートモードに切り替え  
escキー ノーマルモードに切り替え  

ノーマルモード時操作  
j	下に移動  
k	上に移動  
h	左に移動  
l	右に移動  
:w 保存  
:wq	保存して終了  
:q!	保存せずに強制終了  
u	変更内容を一つもとに戻す  
Ctrl + r 変更内容を一つ前にすすめる  

※ インサートモードで編集を終えた際は、必ずノーマルモードに戻り :wq を実行して変更を保存して終了することを心がける  
操作を間違ってファイルの中身をぐちゃぐちゃにしてしまった場合は一度 :q! で強制的に編集を終了した後に再度編集し直すよう心がける  
