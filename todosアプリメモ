一覧画面の表示機能の作成

流れについては以下画像参照
https://res.cloudinary.com/gizumo-inc/image/upload/v1713129945/curriculums/Laravel%20Lesson/App/index_mvc.png

①一覧画面のURI(URL)の設定
PHP Appレッスンでは、直前のURIごとに実行する処理を変更する関数を定義していたが、
Laravelでは、URI(URL)とHTTPメソッドの組み合わせで実行する処理を変更することができる。

URI(URL)とHTTPメソッドの組み合わせで実行する処理を指定することをルート定義と呼ぶ。
ルート定義は、routes/web.phpに記述する必要がある。

routes/web.phpに以下を記述

Route::get('/todo', function () {
    echo 'Hello World!';
});

Route::get()はHTTPメソッドのGETを示しており、getメソッドの第一引数がURIを示している。
第二引数にそのURI(URL)とHTTPメソッドの組み合わせで実行したい処理を記述することでルートを定義することができる。


②一覧画面を表示
todoにアクセスした際に実行したい処理をroutes/web.phpに記載したが、
実行したい処理はControllerに移した方が保守性の観点から望ましい。

Controllerに処理を移すには、Route::get()の第二引数に対象のControllerとそのメソッドを指定する必要がある。
今回はTodoControllerのindexメソッドに処理を移譲する。

# appコンテナ内に以下コマンド
php artisan make:controller TodoController

routes/web.phpの記述を以下に変更
Route::get('/todo', 'TodoController@index');

TodoController.phpに処理内容を記述

一覧画面であるresources/views/todo/index.blade.phpを作成し、中身を記述

TodoController.phpの記述を変更
view関数を用いることで、画面として表示したいHTMLを指定することができる。
view関数の引数には、表示させたいBladeファイルを指定する必要があり、「resources/views/から対象の*.blade.phpまでの相対パスを.区切りで指定」する。


③DBに登録されているデータを取得する
Laravelでは、ORM (Object-Relational Mapping) の一つであるEloquentを用いることでDBの操作を行うことができる。
ORMとは、プログラミング言語のClassとデータベースのテーブルをマッピング（関連付け）することでSQLを直接操作することなく
データベースとマッピングされたClassのメソッドを用いることでDBとやり取りを行うことができる。
Laravelでは、データベースのテーブルとマッピングするClassがModelに当たる。

ModelのClassを作成し、データベースのテーブルとマッピングをする。
# appコンテナ内で以下コマンド
php artisan make:model Todo

app配下に作成されたTodoModelをデータベースのtodosテーブルとマッピングする。
app/Todo.phpに以下記述追加
protected $table = 'todos';
Modelを介することでSQL文を組み立てることなくtodosテーブルを操作することができるようになる。

TodoControllerでTodoModelを使えるようにするために、インスタンス化を行う。
app/Http/Controllers/TodoController.phpに以下記述追加
use App\Todo;
$todo = new Todo();

todosテーブルのレコードを全件取得するための実装。allメソッドを追加するだけで、全件取得することができる。
app/Http/Controllers/TodoController.phpに以下記述追加
$todos = $todo->all();
PHPはvar_dumpを使用することでデバッグを行うが、Laravelでは、Laravel固有のdd()を使用することでデバッグを行う。
ddによって、allメソッドの返り値がIlluminate\Database\Eloquent\Collectionクラスのインスタンスであることがわかる。
CollectionインスタンスはLaravelで用意されているクラスで配列操作に特化したクラスになる。
下記画像参照
https://res.cloudinary.com/gizumo-inc/image/upload/v1621913140/curriculums/Laravel%20Lesson/App/orm.png


④取得したデータを画面に渡す
todosテーブルのレコード情報を全て取得しただけでは画面に表示はされない。取得したデータをHTMLファイルに渡す必要がある。
Laravelでは、Controllerから、HTMLを表すbladeファイルへデータを渡すためにview関数を利用する。
view関数は画面に表示したいbladeファイルを第一引数で指定し、第二引数に渡したいデータを連想配列の形で渡すことができる。
view関数の第二引数の連想配列は、[blade内での変数名 => 代入したい値]を意味する。
実際にbladeファイルデータが渡っているか確認するためにbladeファイルでデバッグする。@dd()を使用する。
view関数を用いることでControllerからbladeファイルへデータを渡すことができる。


⑤画面上にデータを表示する
Controllerからbladeファイルへ渡したデータを画面上に表示する処理を実装する。
bladeファイルとはテンプレートエンジンの一つで、HTMLに比べて簡単に様々な機能を実施することができる。
resources/views/todo/index.blade.phpを修正
bladeにおいて、@はディレクティブと呼ばれ一般的なPHPの制御構文の便利な短縮記述方法を提供してくれる。
@foreachディレクティブはその見た目通りforeachを簡略化して表現してくれたもの
$todosには、Controllerにて取得したCollectionインスタンスが代入されている。
なぜインスタンスをforeachに？と思った方もいるやもしれないが、
先にも述べた通り「配列にできてCollectionにできないことはない」ので、問題ない。
foreachを使うことにより、Collectionインスタンスに格納されているTodoインスタンスを一つずつ$todoとして取り出している。
bladeでは、PHPを記述する際に{{ }}を用いる。この波括弧で囲うことで、その部分がPHPの処理として認識される。
$todo->contentはただのPHPの処理でしたので{{ }}が必要でした。
$todo->contentはtodosテーブルのレコードのcontentカラムを取得している。
このようにモデルクラスのインスタンスからは、$model->カラム名という記述で対応するレコードのカラム値を取得できる。
これとは別に{!! !!}という記法もあり、使い方は{{ }}と同じ。


